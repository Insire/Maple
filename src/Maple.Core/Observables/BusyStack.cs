using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using System.Windows;

using Maple.Localization.Properties;

namespace Maple.Core
{
    /// <summary>
    ///
    /// </summary>
    /// <seealso cref="Maple.Core.ObservableObject" />
    public class BusyStack : ObservableObject
    {
        private ConcurrentBag<BusyToken> _items;
        /// <summary>
        /// Gets or sets the items.
        /// </summary>
        /// <value>
        /// The items.
        /// </value>
        protected ConcurrentBag<BusyToken> Items
        {
            get { return _items; }
            set { SetValue(ref _items, value, async () => await InvokeOnChanged()); }
        }

        private Action<bool> _onChanged;
        /// <summary>
        /// Gets or sets the on changed.
        /// </summary>
        /// <value>
        /// The on changed.
        /// </value>
        public Action<bool> OnChanged
        {
            get { return _onChanged; }
            set { SetValue(ref _onChanged, value); }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusyStack"/> class.
        /// </summary>
        public BusyStack()
        {
            Items = new ConcurrentBag<BusyToken>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusyStack"/> class.
        /// </summary>
        /// <param name="onChanged">The OnChanged Action.</param>
        /// <exception cref="System.ArgumentNullException">onChanged</exception>
        /// <autogeneratedoc />
        public BusyStack(Action<bool> onChanged)
            : this()
        {
            OnChanged = onChanged ?? throw new ArgumentNullException(nameof(onChanged), $"{nameof(onChanged)} {Resources.IsRequired}");
        }

        /// <summary>
        /// Tries to take an item from the stack and returns true if that action was successful
        /// </summary>
        /// <returns></returns>
        public async Task<bool> Pull()
        {
            var result = Items.TryTake(out var token);

            if (result)
                await InvokeOnChanged();

            return result;
        }

        /// <summary>
        /// Adds a new <see cref="BusyToken" /> to the Stack
        /// </summary>
        /// <param name="token">The token.</param>
        public async Task Push(BusyToken token)
        {
            Items.Add(token);

            await InvokeOnChanged();
        }

        /// <summary>
        /// Determines whether this instance has items.
        /// </summary>
        /// <returns>
        ///   <c>true</c> if this instance has items; otherwise, <c>false</c>.
        /// </returns>
        public bool HasItems()
        {
            return Items?.TryPeek(out var token) ?? false;
        }

        /// <summary>
        /// Returns a new <see cref="BusyToken" /> thats associated with <see cref="this" /> instance of a <see cref="BusyStack" />
        /// </summary>
        /// <returns>
        /// a new <see cref="BusyToken" />
        /// </returns>
        public BusyToken GetToken()
        {
            return new BusyToken(this);
        }

        private async Task InvokeOnChanged()
        {
            await Application.Current.Dispatcher.InvokeAsync(() => OnChanged(HasItems()));
        }
    }
}
